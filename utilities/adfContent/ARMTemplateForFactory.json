{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "esp1-swedencentral-adf"
		},
		"AzureFunctionShortClip_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunctionShortClip'"
		},
		"AzureFunctionVideoAssistant_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunctionVideoAssistant'"
		},
		"AzureFunctionShortClip_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://myfunctiontst.azurewebsites.net"
		},
		"AzureFunctionVideoAssistant_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://assistantfunction.azurewebsites.net"
		},
		"GPT4VDeployment_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().open_ai_base}"
		},
		"GPT4VDeployment_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "https://cognitiveservices.azure.com"
		},
		"KeyVault_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://esp1-swedencentral-kv.vault.azure.net/"
		},
		"KeyVault_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "https://vault.azure.net"
		},
		"blobStoreDoc_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://useme2.blob.core.windows.net/"
		},
		"lsBlobStorageVideos_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://useme.blob.core.windows.net/"
		},
		"onYourData_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().documentIntelligenceAPI}documentintelligence/documentModels/@{linkedService().modelId}/analyzeResults/@{linkedService().resultID}?api-version=2023-10-31-preview"
		},
		"onYourData_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "https://cognitiveservices.azure.com"
		},
		"videoIndexerAPI_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.videoindexer.ai/@{linkedService().location}/Accounts/@{linkedService().accountId}/Videos/@{linkedService().videoId}/@{linkedService().dataSource}?accessToken=@{linkedService().accessToken}"
		},
		"triggerVideoBlob_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/be25820a-df86-4794-9e95-6a45cd5c0941/resourceGroups/esp1-rg-swedencentral/providers/Microsoft.Storage/storageAccounts/useme"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/batchGetandAnalyzeVideos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Videos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Secure Values from Key Vault",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "video",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.storageaccountcontainer",
										"type": "Expression"
									},
									"endpoint": {
										"value": "@pipeline().parameters.storageaccounturl",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Get Secure Values from Key Vault",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "keyVault",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ForEach Video File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Videos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Videos').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "childAnalyzeVideo",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "singleVideo_VideoIndexer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sys_message": {
						"type": "string",
						"defaultValue": "Your task is to assist in finding all scenes in this video.         You also need to describe each scene and provide start and end time."
					},
					"user_prompt": {
						"type": "string",
						"defaultValue": "Describe each scene.  You need to combine the scenes in the previous segments with the scenes in the next segment."
					},
					"storageaccounturl": {
						"type": "string",
						"defaultValue": "https://useme.blob.core.windows.net/"
					},
					"storageaccountcontainer": {
						"type": "string",
						"defaultValue": "videosin"
					},
					"temperature": {
						"type": "string",
						"defaultValue": "1"
					},
					"top_p": {
						"type": "string",
						"defaultValue": "1"
					},
					"cosmosaccount": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-cosmosdb.documents.azure.com:443/"
					},
					"cosmosdb": {
						"type": "string",
						"defaultValue": "responses"
					},
					"cosmoscontainer": {
						"type": "string",
						"defaultValue": "video"
					},
					"moderation": {
						"type": "bool",
						"defaultValue": false
					},
					"generateInsightIntervals": {
						"type": "bool",
						"defaultValue": false
					},
					"filterDefectedFrames": {
						"type": "bool",
						"defaultValue": false
					},
					"includeSpeechTranscript": {
						"type": "bool",
						"defaultValue": true
					},
					"openAIurl": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-azopenai.openai.azure.com/"
					},
					"visionurl": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-aivision.cognitiveservices.azure.com/"
					},
					"videoIndex": {
						"type": "string"
					},
					"documentIndex": {
						"type": "string"
					},
					"video": {
						"type": "bool",
						"defaultValue": true
					},
					"documents": {
						"type": "bool",
						"defaultValue": false
					},
					"documentIntelligence": {
						"type": "bool",
						"defaultValue": false
					},
					"videoIndexer": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"top_p": {
						"type": "String",
						"defaultValue": "1"
					},
					"temperature": {
						"type": "String",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-08T08:27:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/video')]",
				"[concat(variables('factoryId'), '/pipelines/keyVault')]",
				"[concat(variables('factoryId'), '/pipelines/singleVideo_VideoIndexer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/keyVault')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set pipeline return variables",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get sas-token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "sas_token",
									"value": {
										"type": "Expression",
										"content": ""
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "get sas-token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://esp1-swedencentral-kv.vault.azure.net/secrets/sas-token?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-08T08:27:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/singleVideo_AISearch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check if success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check and wait until ingestion complete_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ingestionStatus'),'succeeded')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Ingestion failed or timed out",
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Move file to processed container",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Wait2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "videofile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.storageaccountfolder",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"folder": {
													"value": "@pipeline().parameters.storageaccountfolder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "videofile",
											"type": "DatasetReference",
											"parameters": {
												"container": "videosprocessed",
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"folder": {
													"value": "@variables('processedfolder')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move videodoc file_index",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Wait2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "temptextfile",
											"type": "DatasetReference",
											"parameters": {
												"container": "temp",
												"folder": " ",
												"filename": {
													"value": "@{pipeline().parameters.fileName}_prompt.txt",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "temptextfile",
											"type": "DatasetReference",
											"parameters": {
												"container": "videosprocessed",
												"folder": "videodoc",
												"filename": {
													"value": "@{pipeline().parameters.fileName}_transcript.json",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move videodoc file_prompt",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Wait2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "temptextfile",
											"type": "DatasetReference",
											"parameters": {
												"container": "temp",
												"folder": " ",
												"filename": "@{pipeline().parameters.fileName}_index.txt"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "temptextfile",
											"type": "DatasetReference",
											"parameters": {
												"container": "videosprocessed",
												"folder": "videodoc",
												"filename": {
													"value": "@{pipeline().parameters.fileName}_prompt.json",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy GPT4 Response to blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "timestamp",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "fileurl",
													"value": {
														"value": "@{pipeline().parameters.storageaccounturl}@{pipeline().parameters.storageaccountfolder}/@{pipeline().parameters.fileName}",
														"type": "Expression"
													}
												},
												{
													"name": "filename",
													"value": {
														"value": "@pipeline().parameters.fileName",
														"type": "Expression"
													}
												},
												{
													"name": "shortdate",
													"value": {
														"value": "@formatDateTime(pipeline().TriggerTime,'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "temperature",
													"value": {
														"value": "@replace(pipeline().parameters.temperature,'\"temperature:\"','\"\"')",
														"type": "Expression"
													}
												},
												{
													"name": "top_p",
													"value": {
														"value": "@replace(pipeline().parameters.top_p,'\"top_p:\"','\"\"')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:05:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "POST",
											"requestBody": {
												"value": "{\n\"dataSources\": [\n    {\n        \"type\": \"AzureCognitiveSearch\",\n        \"parameters\": {\n            \"endpoint\": \"@{pipeline().parameters.searchServiceEndpoint}\",\n            \"queryType\": \"vectorSimpleHybrid\",\n            \"indexName\": \"@{pipeline().parameters.indexName}\",\n            \"embeddingDeploymentName\": \"@{pipeline().parameters.embeddingDeploymentName}\"\n        }\n    }\n],\n\"messages\": [\n    {\n        \"role\": \"system\",\n        \"content\": \"@{pipeline().parameters.sys_message}\"\n    },\n    {\n        \"role\": \"user\",\n        \"content\": \"@{pipeline().parameters.user_prompt}\"\n    }\n]\n}",
												"type": "Expression"
											},
											"additionalHeaders": {
												"Content-Type": "application/json"
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "OAIGPT4V",
											"type": "DatasetReference",
											"parameters": {
												"openai_api_base": {
													"value": "@pipeline().parameters.openai_api_base",
													"type": "Expression"
												},
												"gpt4v_deployment_name": {
													"value": "@pipeline().parameters.gpt_4v_deployment_name",
													"type": "Expression"
												},
												"relative_url": {
													"value": "@{pipeline().parameters.openai_api_base}openai/deployments/@{pipeline().parameters.gpt_4v_deployment_name}/extensions/chat/completions?api-version=2023-12-01-preview",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "tempfile",
											"type": "DatasetReference",
											"parameters": {
												"filename": "response.json",
												"containername": "test"
											}
										}
									]
								},
								{
									"name": "Wait2",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Copy GPT4 Response to blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 60
									}
								}
							]
						}
					},
					{
						"name": "Check and wait until ingestion complete_copy1_copy1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Ingest to AI Search",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(equals(variables('ingestionStatus'),'succeeded'),equals(variables('ingestionStatus'),'Failed'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check if OpenAI completed",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set OpenAI ingestion status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(equals(variables('ingestionStatus'),'notRunning'),equals(variables('ingestionStatus'),'running'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait and check OpenAI again in a bit",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 10
												}
											}
										]
									}
								},
								{
									"name": "Set OpenAI ingestion status",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "see if openai ingestion completed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ingestionStatus",
										"value": {
											"value": "@activity('see if openai ingestion completed').output.status",
											"type": "Expression"
										}
									}
								},
								{
									"name": "see if openai ingestion completed",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": {
											"value": "@{pipeline().parameters.openai_api_base}openai/extensions/on-your-data/ingestion-jobs/@{pipeline().parameters.indexName}?api-version=2023-10-01-preview",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://cognitiveservices.azure.com"
										}
									}
								}
							],
							"timeout": "0.00:15:00"
						}
					},
					{
						"name": "Ingest to AI Search",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set guid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "PUT",
							"headers": {
								"Content-Type": "application/json",
								"storageEndpoint": {
									"value": "@pipeline().parameters.storageaccounturl",
									"type": "Expression"
								},
								"storageConnectionString": {
									"value": "ResourceId=@{pipeline().parameters.storageAccountResourceId}",
									"type": "Expression"
								},
								"storageContainer": "temp",
								"searchServiceEndpoint": {
									"value": "@pipeline().parameters.searchServiceEndpoint",
									"type": "Expression"
								},
								"embeddingDeploymentName": {
									"value": "@pipeline().parameters.embeddingDeploymentName",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@{pipeline().parameters.openai_api_base}openai/extensions/on-your-data/ingestion-jobs/@{pipeline().parameters.indexName}@{variables('guid')}?api-version=2023-10-01-preview",
								"type": "Expression"
							},
							"body": {
								"completionAction": "keepAllAssets",
								"dataRefreshIntervalInMinutes": 60,
								"chunkSize": 1024
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://cognitiveservices.azure.com"
							}
						}
					},
					{
						"name": "Set guid",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "guid",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "_LA-RESISTENCIAmp4.mp4"
					},
					"computer_vision_url": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-aivision.cognitiveservices.azure.com/"
					},
					"vision_api_key": {
						"type": "string",
						"defaultValue": "3e8a522cf5bb4d5680515dc56e7775e7"
					},
					"gpt_4v_deployment_name": {
						"type": "string",
						"defaultValue": "vis-gpt4-vision"
					},
					"openai_api_base": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-azopenai.openai.azure.com/"
					},
					"sys_message": {
						"type": "string",
						"defaultValue": "Your task is to extract the scenes that is suitable for making short videos that can go viral on social media. You have to rate them in probability of going viral 1 to 10, 10 being the most likely. Please rate each clip independently but must in the context of the full video.   Here are the steps you should follow: ------- 1. Process all the scenes in the video to understand the context. 2. Process each scene to find the relevance and probability of going viral based on criteria/hints mentioned below and rate them. 3. Rate them in 1 to 10, 10 being the most likely but use the rating only once. There should not be any duplicate ratings.   You have to combine all the information present in the content using all the different tags and then find the suitable clips based on that.   {     summary: This is the summary of the whole video,     scenes: [         {             id: scene id,             title: short title of the scene based on summary,             rating: 10,             reasoning: This scene is suitable for making short videos that can go viral on social media because...,             description: brief description of what this scene is about,             start_time: start time of the scene,             end_time: end time of the scene,             transcript: This is the transcript of the scene,             translation: Translation of the transcript to English         }     ] }   - Your output must be in strict JSON format. Don't include any comments or other characters that are not part of the JSON format. - Translate the output to English if the source transcript is not in English. - You identify top scenes based on the rating that are suitable for making short videos that can go viral and sort it by rating. - You are not allowed to add new line characters in the transcript. - Do not include information that is not part of the input provided. - Not all the content will have the suitable clips. If you cannot find it or determine the applicability of the scene, continue with processing the next scene. - You have to parse entire content to find the suitable clips and rank them based on probability of going viral. - You have to provide the rating of the probability of the clip going viral 1 to 10, 10 being the most likely. Please rate each clip independently. - you have to provide reasoning for the rating. - order your response based on ratings."
					},
					"user_prompt": {
						"type": "string",
						"defaultValue": "Using the data provided, extract the scenes that is suitable for making short videos that can go viral on social media."
					},
					"sas_token": {
						"type": "string",
						"defaultValue": ""
					},
					"storageaccounturl": {
						"type": "string",
						"defaultValue": "https://useme.blob.core.windows.net/"
					},
					"storageaccountfolder": {
						"type": "string",
						"defaultValue": "videosin"
					},
					"temperature": {
						"type": "string",
						"defaultValue": "1"
					},
					"top_p": {
						"type": "string",
						"defaultValue": "1"
					},
					"cosmosaccount": {
						"type": "string",
						"defaultValue": "esp1-swedencentral-cosmosdb"
					},
					"cosmosdb": {
						"type": "string",
						"defaultValue": "resonses"
					},
					"cosmoscontainer": {
						"type": "string",
						"defaultValue": "video"
					},
					"viAccountId": {
						"type": "string",
						"defaultValue": "0e64c9d4-35d6-46ad-ae39-580df9a6b16f"
					},
					"subscriptionId": {
						"type": "string",
						"defaultValue": "be25820a-df86-4794-9e95-6a45cd5c0941"
					},
					"resourceGroup": {
						"type": "string",
						"defaultValue": "esp1-rg-swedencentral"
					},
					"viAccountName": {
						"type": "string",
						"defaultValue": "esp1-swedencentral-aivideo"
					},
					"viRegion": {
						"type": "string",
						"defaultValue": "swedencentral"
					},
					"indexName": {
						"type": "string",
						"defaultValue": "esp1videoes2"
					},
					"searchServiceEndpoint": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-azaisearch.search.windows.net"
					},
					"storageAccountResourceId": {
						"type": "string",
						"defaultValue": "/subscriptions/be25820a-df86-4794-9e95-6a45cd5c0941/resourceGroups/esp1-rg-swedencentral/providers/Microsoft.Storage/storageAccounts/useme"
					},
					"embeddingDeploymentName": {
						"type": "string",
						"defaultValue": "embedding"
					},
					"language": {
						"type": "string",
						"defaultValue": "es-ES"
					}
				},
				"variables": {
					"indexName": {
						"type": "String"
					},
					"indexID": {
						"type": "String"
					},
					"ingestionStatus": {
						"type": "String",
						"defaultValue": "Running"
					},
					"sasurl": {
						"type": "String"
					},
					"damageprobablity": {
						"type": "String"
					},
					"processedfolder": {
						"type": "String"
					},
					"viToken": {
						"type": "String"
					},
					"viVideoId": {
						"type": "String"
					},
					"AssistantID": {
						"type": "String"
					},
					"promptFileId": {
						"type": "String"
					},
					"indexFileId": {
						"type": "String"
					},
					"AttachmentFileContent": {
						"type": "String"
					},
					"AttachmentArray": {
						"type": "Array"
					},
					"WebRequestContentType": {
						"type": "String"
					},
					"WebRequestBody": {
						"type": "String"
					},
					"guid": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-11T18:38:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/videofile')]",
				"[concat(variables('factoryId'), '/datasets/temptextfile')]",
				"[concat(variables('factoryId'), '/datasets/OAIGPT4V')]",
				"[concat(variables('factoryId'), '/datasets/tempfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/singleVideo_Assistant')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check if success",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "If assistent is completed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ingestionStatus'),'succeeded')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Ingestion failed or timed out",
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Move file to processed container",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "videofile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.storageaccountfolder",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"folder": {
													"value": "@pipeline().parameters.storageaccountfolder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "videofile",
											"type": "DatasetReference",
											"parameters": {
												"container": "videosprocessed",
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"folder": {
													"value": "@variables('processedfolder')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move videodoc file_index",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "viTempFile",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@{pipeline().parameters.fileName}_index.txt",
													"type": "Expression"
												},
												"container": "temp",
												"folder": " "
											}
										}
									],
									"outputs": [
										{
											"referenceName": "viTempFile",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@{pipeline().parameters.fileName}_index.txt",
													"type": "Expression"
												},
												"container": "videosprocessed",
												"folder": "videodoc"
											}
										}
									]
								},
								{
									"name": "Move videodoc file_prompt",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "viTempFile",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@{pipeline().parameters.fileName}_index.txt",
													"type": "Expression"
												},
												"container": "temp",
												"folder": " "
											}
										}
									],
									"outputs": [
										{
											"referenceName": "viTempFile",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@{pipeline().parameters.fileName}_prompt.txt",
													"type": "Expression"
												},
												"container": "videosprocessed",
												"folder": "videodoc"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy promptfile",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "tempfile",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@{pipeline().parameters.fileName}_prompt.txt",
										"type": "Expression"
									},
									"containername": "temp"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "tempfile",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@{pipeline().parameters.fileName}_propmt.json",
										"type": "Expression"
									},
									"containername": "assistant"
								}
							}
						]
					},
					{
						"name": "Upload prompts file",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Copy promptfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "orchestrators/assistant_orchestrator",
							"body": {
								"value": "{\"openai_api_base\":\"@{pipeline().parameters.openai_api_base}\",   \"storage_domain_name\":\"@{pipeline().parameters.storageaccounturl}\", \"storage_container_name\": \"assistant\",\"storage_blob_name\": \"@{pipeline().parameters.fileName}_prompt.json\", \"openai_model\": \"gpt-4\", \"category\": @{pipeline().parameters.category}}",
								"type": "Expression"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "AzureFunctionVideoAssistant",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check assistant status",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Upload prompts file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@activity('Upload prompts file').output.statusQueryGetUri",
								"type": "Expression"
							},
							"body": " "
						}
					},
					{
						"name": "If assistent is completed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check assistant status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check assistant status').output.runtimeStatus,'Completed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Function running OpenAI Assistant failed",
										"errorCode": "400"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Azure Function Marvin",
									"type": "AzureFunctionActivity",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "startworkflow",
										"body": {
											"value": "{\n    \"orchestrator_workflow_name\": \"video_extraction_orchestrator\",\n    \"orchestrator_workflow_properties\": {\n        \"content_url_video\": \"@{pipeline().parameters.storageaccounturl}videosin/@{pipeline().parameters.fileName}\",\n        \"content_url_openai\": \"response_@{pipeline().parameters.storageaccounturl}assistant/@{pipeline().parameters.fileName}_prompt.json\"\n    }\n}",
											"type": "Expression"
										},
										"headers": {},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctionShortClip",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Azure Function Marvin_fake",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "startworkflow",
										"body": {
											"orchestrator_workflow_name": "video_extraction_orchestrator",
											"orchestrator_workflow_properties": {
												"content_url_video": "https://useme.blob.core.windows.net/videosin/video.mp4",
												"content_url_openai": "https://useme.blob.core.windows.net/assistant/data.json"
											}
										},
										"headers": {},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctionShortClip",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "_LA-RESISTENCIAmp4.mp4"
					},
					"user_prompt": {
						"type": "string",
						"defaultValue": "Describe each scene.  You need to combine the scenes in the previous segments with the scenes in the next segment."
					},
					"storageaccountfolder": {
						"type": "string",
						"defaultValue": "videosin"
					},
					"temperature": {
						"type": "string",
						"defaultValue": "1"
					},
					"top_p": {
						"type": "string",
						"defaultValue": "1"
					},
					"category": {
						"type": "string",
						"defaultValue": "football_talkshow"
					},
					"openai_api_base": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-azopenai.openai.azure.com/"
					},
					"storageaccounturl": {
						"type": "string",
						"defaultValue": "https://useme2.blob.core.windows.net/"
					}
				},
				"variables": {
					"indexName": {
						"type": "String"
					},
					"indexID": {
						"type": "String"
					},
					"ingestionStatus": {
						"type": "String",
						"defaultValue": "Running"
					},
					"sasurl": {
						"type": "String"
					},
					"damageprobablity": {
						"type": "String"
					},
					"processedfolder": {
						"type": "String"
					},
					"viToken": {
						"type": "String"
					},
					"viVideoId": {
						"type": "String"
					},
					"AssistantID": {
						"type": "String"
					},
					"promptFileId": {
						"type": "String"
					},
					"indexFileId": {
						"type": "String"
					},
					"AttachmentFileContent": {
						"type": "String"
					},
					"AttachmentArray": {
						"type": "Array"
					},
					"WebRequestContentType": {
						"type": "String"
					},
					"WebRequestBody": {
						"type": "String"
					},
					"guid": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-11T18:38:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tempfile')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureFunctionVideoAssistant')]",
				"[concat(variables('factoryId'), '/datasets/videofile')]",
				"[concat(variables('factoryId'), '/datasets/viTempFile')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureFunctionShortClip')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/singleVideo_VideoIndexer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check and wait until ingestion complete",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set videoid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(equals(variables('ingestionStatus'),'Processed'),equals(variables('ingestionStatus'),'Failed'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check if completed",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set ingestion status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(equals(variables('ingestionStatus'),'Processed'),equals(variables('ingestionStatus'),'Failed'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait and check again in a bit",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 150
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "create file with prompt",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "RestSource",
														"httpRequestTimeout": "00:01:40",
														"requestInterval": "00.00:00:00.010",
														"requestMethod": "GET",
														"paginationRules": {
															"supportRFC5988": "true"
														}
													},
													"sink": {
														"type": "JsonSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "JsonWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "videoIndexerDS",
														"type": "DatasetReference",
														"parameters": {
															"location": {
																"value": "@pipeline().parameters.viRegion",
																"type": "Expression"
															},
															"accountId": {
																"value": "@pipeline().parameters.viAccountId",
																"type": "Expression"
															},
															"videoId": {
																"value": "@variables('viVideoId')",
																"type": "Expression"
															},
															"accessToken": {
																"value": "@variables('viToken')",
																"type": "Expression"
															},
															"dataSource": "PromptContent"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "viTempFile",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@{pipeline().parameters.fileName}_prompt.txt",
																"type": "Expression"
															},
															"container": "temp",
															"folder": " "
														}
													}
												]
											},
											{
												"name": "create file with index",
												"type": "Copy",
												"state": "Inactive",
												"onInactiveMarkAs": "Succeeded",
												"dependsOn": [
													{
														"activity": "Wait 60 seconds",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "RestSource",
														"httpRequestTimeout": "00:01:40",
														"requestInterval": "00.00:00:00.010",
														"requestMethod": "GET",
														"paginationRules": {
															"supportRFC5988": "true"
														}
													},
													"sink": {
														"type": "JsonSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "JsonWriteSettings"
														}
													},
													"enableStaging": false
												},
												"outputs": [
													{
														"referenceName": "viTempFile",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@{pipeline().parameters.fileName}_index.txt",
																"type": "Expression"
															},
															"container": "temp",
															"folder": " "
														}
													}
												]
											},
											{
												"name": "create file with prompt for assistant",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Wait 60 seconds",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "RestSource",
														"httpRequestTimeout": "00:01:40",
														"requestInterval": "00.00:00:00.010",
														"requestMethod": "GET",
														"paginationRules": {
															"supportRFC5988": "true"
														}
													},
													"sink": {
														"type": "JsonSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "JsonWriteSettings"
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true
												},
												"inputs": [
													{
														"referenceName": "videoIndexerDS",
														"type": "DatasetReference",
														"parameters": {
															"location": {
																"value": "@pipeline().parameters.viRegion",
																"type": "Expression"
															},
															"accountId": {
																"value": "@pipeline().parameters.viAccountId",
																"type": "Expression"
															},
															"videoId": {
																"value": "@variables('viVideoId')",
																"type": "Expression"
															},
															"accessToken": {
																"value": "@variables('viToken')",
																"type": "Expression"
															},
															"dataSource": "PromptContent"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "viTempFile",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@{pipeline().parameters.fileName}_prompt.json",
																"type": "Expression"
															},
															"container": "assistant",
															"folder": " "
														}
													}
												]
											},
											{
												"name": "Wait 60 seconds",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "create file with prompt",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 60
												}
											}
										]
									}
								},
								{
									"name": "Set ingestion status",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Call API to see if ingestion completed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ingestionStatus",
										"value": {
											"value": "@activity('Call API to see if ingestion completed').output.state",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Call API to see if ingestion completed",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": {
											"value": "https://api.videoindexer.ai/@{pipeline().parameters.viRegion}/Accounts/@{pipeline().parameters.viAccountId}/Videos/@{variables('viVideoId')}/Index?language=es-ES&reTranslate=false&includeStreamingUrls=true&includeSummarizedInsights=true&accessToken=@{variables('viToken')}",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.01:00:00"
						}
					},
					{
						"name": "generate token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.subscriptionId}/resourceGroups/@{pipeline().parameters.resourceGroup}/providers/Microsoft.VideoIndexer/accounts/@{pipeline().parameters.viAccountName}/generateAccessToken?api-version=2024-01-01",
								"type": "Expression"
							},
							"body": {
								"permissionType": "Contributor",
								"scope": "Account"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com"
							}
						}
					},
					{
						"name": "Set token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "generate token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "viToken",
							"value": {
								"value": "@activity('generate token').output.accessToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Upload Video",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "https://api.videoindexer.ai/@{pipeline().parameters.viRegion}/Accounts/@{pipeline().parameters.viAccountId}/Videos?name=@{pipeline().parameters.fileName}&privacy=Private&priority=Low&language=@{pipeline().parameters.language}&videoUrl=@{pipeline().parameters.storageaccounturl}@{pipeline().parameters.storageaccountfolder}/@{pipeline().parameters.fileName}?@{pipeline().parameters.sas_token}&indexingPreset=Default&streamingPreset=Default&sendSuccessEmail=false&useManagedIdentityToDownloadVideo=true&preventDuplicates=false&accessToken=@{variables('viToken')}",
								"type": "Expression"
							},
							"body": " "
						}
					},
					{
						"name": "Set videoid",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Upload Video",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "viVideoId",
							"value": {
								"value": "@activity('Upload Video').output.id",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition AI Search",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check and wait until ingestion complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ingestionStatus'),'Processed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail2",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Ingestion failed or timed out",
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute AISearch",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "singleVideo_AISearch",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"computer_vision_url": {
												"value": "@pipeline().parameters.computer_vision_url",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Assistant",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "singleVideo_Assistant",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "_LA-RESISTENCIAmp4.mp4"
					},
					"computer_vision_url": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-aivision.cognitiveservices.azure.com/"
					},
					"vision_api_key": {
						"type": "string",
						"defaultValue": "3e8a522cf5bb4d5680515dc56e7775e7"
					},
					"gpt_4v_deployment_name": {
						"type": "string",
						"defaultValue": "vis-gpt4-vision"
					},
					"openai_api_base": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-azopenai.openai.azure.com/"
					},
					"sys_message": {
						"type": "string",
						"defaultValue": "Your task is to assist in finding all scenes in this video.         You also need to describe each scene and provide start and end time."
					},
					"user_prompt": {
						"type": "string",
						"defaultValue": "Describe each scene.  You need to combine the scenes in the previous segments with the scenes in the next segment."
					},
					"sas_token": {
						"type": "string",
						"defaultValue": "<sas-token>"
					},
					"storageaccounturl": {
						"type": "string",
						"defaultValue": "https://useme2.blob.core.windows.net/"
					},
					"storageaccountfolder": {
						"type": "string",
						"defaultValue": "videosin"
					},
					"temperature": {
						"type": "string",
						"defaultValue": "1"
					},
					"top_p": {
						"type": "string",
						"defaultValue": "1"
					},
					"viAccountId": {
						"type": "string",
						"defaultValue": "0e64c9d4-35d6-46ad-ae39-580df9a6b16f"
					},
					"subscriptionId": {
						"type": "string",
						"defaultValue": "be25820a-df86-4794-9e95-6a45cd5c0941"
					},
					"resourceGroup": {
						"type": "string",
						"defaultValue": "esp1-rg-swedencentral"
					},
					"viAccountName": {
						"type": "string",
						"defaultValue": "esp1-swedencentral-aivideo"
					},
					"viRegion": {
						"type": "string",
						"defaultValue": "swedencentral"
					},
					"indexName": {
						"type": "string",
						"defaultValue": "esp1videoes"
					},
					"searchServiceEndpoint": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-azaisearch.search.windows.net"
					},
					"storageAccountResourceId": {
						"type": "string",
						"defaultValue": "/subscriptions/be25820a-df86-4794-9e95-6a45cd5c0941/resourceGroups/esp1-rg-swedencentral/providers/Microsoft.Storage/storageAccounts/useme"
					},
					"embeddingDeploymentName": {
						"type": "string",
						"defaultValue": "embedding"
					},
					"language": {
						"type": "string",
						"defaultValue": "es-ES"
					}
				},
				"variables": {
					"indexName": {
						"type": "String"
					},
					"indexID": {
						"type": "String"
					},
					"ingestionStatus": {
						"type": "String",
						"defaultValue": "Running"
					},
					"sasurl": {
						"type": "String"
					},
					"damageprobablity": {
						"type": "String"
					},
					"processedfolder": {
						"type": "String"
					},
					"viToken": {
						"type": "String"
					},
					"viVideoId": {
						"type": "String"
					},
					"AssistantID": {
						"type": "String"
					},
					"guid": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-11T18:38:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/singleVideo_AISearch')]",
				"[concat(variables('factoryId'), '/pipelines/singleVideo_Assistant')]",
				"[concat(variables('factoryId'), '/datasets/videoIndexerDS')]",
				"[concat(variables('factoryId'), '/datasets/viTempFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OAIGPT4V')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GPT4VDeployment",
					"type": "LinkedServiceReference",
					"parameters": {
						"open_ai_base": {
							"value": "@dataset().openai_api_base",
							"type": "Expression"
						},
						"gpt4deployment": {
							"value": "@dataset().gpt4v_deployment_name",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"openai_api_base": {
						"type": "String"
					},
					"gpt4v_deployment_name": {
						"type": "string"
					},
					"relative_url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relative_url",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GPT4VDeployment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/indexFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsBlobStorageVideos",
					"type": "LinkedServiceReference",
					"parameters": {
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						},
						"folder": " ",
						"file": {
							"value": "@dataset().filename",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "assistant"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsBlobStorageVideos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onYourData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onYourData",
					"type": "LinkedServiceReference",
					"parameters": {
						"documentIntelligenceAPI": {
							"value": "@dataset().documentIntelligenceAPI",
							"type": "Expression"
						},
						"modelId": {
							"value": "@dataset().modelId",
							"type": "Expression"
						},
						"resultID": {
							"value": "@dataset().resultID",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"documentIntelligenceAPI": {
						"type": "string"
					},
					"modelId": {
						"type": "string"
					},
					"resultID": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onYourData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tempfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blobStoreDoc",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "tempfile.txt"
					},
					"containername": {
						"type": "string",
						"defaultValue": "temp"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blobStoreDoc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/temptextfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blobStoreDoc",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "temp"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blobStoreDoc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/viTempFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blobStoreDoc",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blobStoreDoc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/video')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsBlobStorageVideos",
					"type": "LinkedServiceReference",
					"parameters": {
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						},
						"folder": "nothing",
						"file": "nothing"
					}
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "na"
					},
					"endpoint": {
						"type": "string",
						"defaultValue": "na"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsBlobStorageVideos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/videoIndexerDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "videoIndexerAPI",
					"type": "LinkedServiceReference",
					"parameters": {
						"location": {
							"value": "@dataset().location",
							"type": "Expression"
						},
						"videoId": {
							"value": "@dataset().videoId",
							"type": "Expression"
						},
						"accountId": {
							"value": "@dataset().accountId",
							"type": "Expression"
						},
						"accessToken": {
							"value": "@dataset().accessToken",
							"type": "Expression"
						},
						"dataSource": "@dataset().dataSource"
					}
				},
				"parameters": {
					"location": {
						"type": "string",
						"defaultValue": "swedencentral"
					},
					"accountId": {
						"type": "string",
						"defaultValue": "0e64c9d4-35d6-46ad-ae39-580df9a6b16f"
					},
					"videoId": {
						"type": "string",
						"defaultValue": "602490d832"
					},
					"accessToken": {
						"type": "string",
						"defaultValue": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJWZXJzaW9uIjoiMi4wLjAuMCIsIktleVZlcnNpb24iOiIzOWRkZTA2ZmY3MjY0MzM3ODkxZTY4ZThjY2U2YjlkOCIsIkFjY291bnRJZCI6IjBlNjRjOWQ0LTM1ZDYtNDZhZC1hZTM5LTU4MGRmOWE2YjE2ZiIsIkFjY291bnRUeXBlIjoiQXJtIiwiUGVybWlzc2lvbiI6IkNvbnRyaWJ1dG9yIiwiRXh0ZXJuYWxVc2VySWQiOiI2RTc4MTIzNzFBNjU0RUIwOEZGQjQ5RDA1OENEQTgxMyIsIlVzZXJUeXBlIjoiTWljcm9zb2Z0Q29ycEFhZCIsIklzc3VlckxvY2F0aW9uIjoic3dlZGVuY2VudHJhbCIsIm5iZiI6MTcwOTIxNzkzNywiZXhwIjoxNzA5MjIxODM3LCJpc3MiOiJodHRwczovL2FwaS52aWRlb2luZGV4ZXIuYWkvIiwiYXVkIjoiaHR0cHM6Ly9hcGkudmlkZW9pbmRleGVyLmFpLyJ9.jqNdMJnnd7JgqwSWwL_qmjnik6T7Ahs1shlDj6gFgd0atG7yNlLH88wQypKkGbLXI9UCZ6KnBNAFLg1sNs6XLZP4AczCYlDy-mMx2NPqHIv5Xc3CGVw2ub162SGzTxSs4fyA1eLAmkJhNfjsQC-2hR-BPY7R_t8kyTlZr3YQX5f5rVS5j3zAJDAAB-y3OYpnGN3k_Wmr2SBdP75WJAhHV-b4OiKQzB_P2PemO7JxlAcOOuXRy9i8secb1sX7kXIQBFl9d9o0e2xioarQ3kZ7A2lv1xuHquE01JC7tKRv1_s-TrSeZlBrTo5LdMORnyYyh2X1B-bExBhGoCdQoPWPwQ"
					},
					"dataSource": {
						"type": "string",
						"defaultValue": "PromptContent"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/videoIndexerAPI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/videofile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsBlobStorageVideos",
					"type": "LinkedServiceReference",
					"parameters": {
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						},
						"folder": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"file": {
							"value": "@dataset().filename",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "na"
					},
					"filename": {
						"type": "string",
						"defaultValue": "na"
					},
					"folder": {
						"type": "string",
						"defaultValue": "na"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsBlobStorageVideos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunctionShortClip')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunctionShortClip_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunctionShortClip_functionKey')]"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunctionVideoAssistant')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunctionVideoAssistant_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunctionVideoAssistant_functionKey')]"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GPT4VDeployment')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"open_ai_base": {
						"type": "string",
						"defaultValue": "https://esp1-swedencentral-azopenai.openai.azure.com/"
					},
					"gpt4deployment": {
						"type": "string",
						"defaultValue": "vis-gpt4-vision"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('GPT4VDeployment_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "ManagedServiceIdentity",
					"aadResourceId": "[parameters('GPT4VDeployment_properties_typeProperties_aadResourceId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "WebConnection",
				"typeProperties": {
					"url": "[parameters('KeyVault_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "ManagedServiceIdentity",
					"aadResourceId": "[parameters('KeyVault_properties_typeProperties_aadResourceId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blobStoreDoc')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('blobStoreDoc_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lsBlobStorageVideos')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('lsBlobStorageVideos_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/onYourData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"documentIntelligenceAPI": {
						"type": "string"
					},
					"modelId": {
						"type": "string"
					},
					"resultID": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('onYourData_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "ManagedServiceIdentity",
					"aadResourceId": "[parameters('onYourData_properties_typeProperties_aadResourceId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/videoIndexerAPI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"location": {
						"type": "string"
					},
					"videoId": {
						"type": "string"
					},
					"accountId": {
						"type": "string"
					},
					"accessToken": {
						"type": "string"
					},
					"dataSource": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('videoIndexerAPI_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerVideoBlob')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/videosin/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('triggerVideoBlob_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}
